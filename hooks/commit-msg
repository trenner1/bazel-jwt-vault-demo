#!/bin/sh
# Git commit-msg hook to validate conventional commit format
# Place this file in .git/hooks/commit-msg and make it executable

# Require scope for this project
commit_regex='^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)\(.+\)\!?:.{1,50}'

error() {
    echo "Invalid commit message format!"
    echo ""
    echo "Expected format: <type>(<scope>): <description>"
    echo ""
    echo "Types: feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert"
    echo "Required scopes: auth, vault, broker, cli, security, config, docs, testing, docker, ui, dev"
    echo ""
    echo "Examples:"
    echo "  feat(auth): add OIDC authentication with Okta"
    echo "  fix(vault): resolve token creation permission error"
    echo "  docs(testing): update security testing guide"
    echo "  test(security): add team isolation validation"
    echo ""
    echo "Your commit message:"
    cat "$1"
    echo ""
    exit 1
}

# Skip validation for merge commits
if [ "$(head -1 "$1" | grep -c "^Merge")" -eq 1 ]; then
    exit 0
fi

# Skip validation for revert commits generated by git
if [ "$(head -1 "$1" | grep -c "^Revert")" -eq 1 ]; then
    exit 0
fi

# Validate commit message format
if ! grep -qE "$commit_regex" "$1"; then
    error
fi

# Additional validation for description length
description=$(head -1 "$1" | sed 's/^[^:]*: //')
if [ ${#description} -lt 3 ]; then
    echo "Commit description too short (minimum 3 characters)"
    exit 1
fi

if [ ${#description} -gt 50 ]; then
    echo "Warning: Commit description is long (${#description} characters, recommended <50)"
    echo "Consider shortening: $description"
fi

echo "Commit message format valid"
exit 0